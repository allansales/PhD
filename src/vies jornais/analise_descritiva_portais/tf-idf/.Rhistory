disc.intro <- names(sort(table(alunos$CODIGO), decreasing = T)[1:5])
disc.intro
}
#adiciona informacoes de disciplinas
add.disc.infor <- function(atributos, alunos){
alunos <- reshape(alunos, timevar = "CODIGO", idvar = c("MATRICULA"), direction = "wide")
atributos <- merge(atributos, alunos, by="MATRICULA")
atributos
}
geraAtributos <- function(alunos){
atributos <- cria.frame(alunos)
atributos <- add.ndisc(alunos, atributos)
atributos <- add.ndisc.situacao(alunos, atributos, 'Aprovado', 'N.APROV')
atributos <- add.media.aprov(alunos, atributos)
atributos <- add.ndisc.situacao(alunos, atributos, 'Reprovado', 'N.RPN')
atributos <- add.ndisc.repr(alunos, atributos)
atributos <- add.status.sem.1(atributos)
atributos <- add.media.semestre(atributos, alunos)
#   disc.intro <- get.disc.intro(alunos)
#   alunos <- alunos[,c("MATRICULA","CODIGO","MEDIA","SITUACAO")]
#   alunos <- alunos[alunos$CODIGO %in% disc.intro,]
#   alunos$CURSOU <- 1
#   atributos <- add.disc.infor(atributos, alunos[,c("MATRICULA","CODIGO","CURSOU")])
#   atributos <- add.disc.infor(atributos, alunos[,c("MATRICULA","CODIGO","MEDIA")])
#   atributos <- add.disc.infor(atributos, alunos[,c("MATRICULA","CODIGO","SITUACAO")])
atributos
}
alunos <- read.csv(file = '../data/alunosUFCG.csv', sep=";", header = T)
cursos <- unique(alunos$CURSO)
for(curso in cursos){
alunos.1 <- alunos[alunos$CURSO==curso & alunos$PERIODO_RELATIVO == 1 & alunos$SITUACAO != 'Trancado',]
nome <- paste(curso,".csv",sep="")
atributos <- try(geraAtributos(alunos.1))
if(class(atributos)!='try-error'){
if(nrow(atributos)>=600){
write.table(atributos, file = paste("curso.atributos/",nome,sep=""), sep=";", row.names = F, quote = F)
}
}
}
# alunos <- read.csv(file = '../data/alunosUFCG.csv', sep=";", header = T)
# alunos.1 <- alunos[alunos$PERIODO_RELATIVO == 1 & alunos$SITUACAO != 'Trancado',]
# atributos <- geraAtributos(alunos.1)
# write.table(atributos, file = "todosAlunos.csv", sep=";", row.names = F, quote = F)
library("RODBC")
channel <- odbcConnect("OpenPRE; CharSet=utf8")
historico = sqlQuery(channel, "select * from preanalytics2015.historico;", stringsAsFactor = FALSE)
View(historico)
unique(historico[,c('media','situacao')]
)
unique(historico['media'==NA,c('situacao')])
historico['media'==NA,c('situacao')]
subset(historico, subset = media==NA, select = situacao)
subset(historico, subset = media==NA, select = 'situacao')
subset(historico, historico$media==NA)
subset(historico, historico$media=='NA', select = 'situacao')
View(historico)
subset(historico, historico$media=='Trancado', select = 'situacao')
str(historico)
View(historico)
subset(historico, select = 'situacao')
str(historico)
write.csv(historico, "historico.csv", quote = F, sep=";", row.names = F, col.names = T)
?write.csv
a<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
?cor.test
cor.test(a,a,method = "spearman")
cor(a,a,method = "spearman")
?information.gain
require("dplyr")
data = data.frame(series_name = c("Sherlock","A"), UserRating = c(1,2))
filter( series_name == "Sherlock") %>% select(UserRating)
filter(data, series_name == "Sherlock") %>% select(UserRating)
library(readr)
library(dplyr)
library(ggplot2)
library(readr)
install.packages("mongolite")
install.packages("oppenssl")
install.packages("openssl")
install.packages("openssl")
install.packages("mongolite")
library(mongolite)
library(dplyr)
library(ggplot2)
mongo(db = "stocks", url = "mongodb://localhost",
verbose = FALSE, options = ssl_options())
stocks <- mongo(db = "stocks", url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
library(dplyr)
library(ggplot2)
library(mongolite)
con <- mongo(db = "stocks", url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
mydata <- con$find()
View(mydata)
View(mydata)
con <- mongo(db = "stocks", collection = "g1Noticias", url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
mydata <- con$find()
View(mydata)
mydata <- con$info()
con$info()
info <- con$info()
con <- mongo(db = "stocks", collection = "g1Noticias", url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
mydata <- con$find()
info <- con$info()
View(mydata)
rm(con)
gc()
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
rm(con)
return(con)
}
g1_noticias <- get_data("g1Noticias")
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
rm(con)
return(con)
}
g1_noticias <- get_data("g1Noticias")
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
estadao_comentarios <- get_data("estadaoComentarios")
View(folha_noticias)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
a <- ggplot(mpg, aes(hwy)) + geom_density(kernel = "gaussian")
a
View(g1_noticias)
g1_noticias %>% select(timestamp) %>% count()
g1_noticias %>% select(timestamp) %>% n()
g1_noticias %>% select(timestamp) %>% summarise(my_cnt1 = n())
g1_noticias %>% select(timestamp) %>% distinct() %>% count()
g1_noticias %>% select(timestamp) %>% unique() %>% count()
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp)))
library(lubridate)
install.packages("lubridate")
library(lubridate)
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp)))
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp)))
a <- ggplot(, aes(hwy)) + geom_density(kernel = "gaussian")
hour()
?hour()
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(created_utc, origin='1970-01-01')))
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp, origin='1970-01-01')))
?hour
?lubridate
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
ggplot(noticias) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
summary(noticias)
media_mes <- noticias %>% group_by(mes) %>% summarise(media = n()/7) #numero de anos ate agora
View(media_mes)
media_mes <- noticias %>% group_by(mes, subFonte) %>% summarise(media = n()/7) #numero de anos ate agora
View(media_mes)
View(media_mes)
noticias_mes <- noticias %>% group_by(mes, subFonte) %>% summarise(numero = n())
View(noticias_mes)
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean())
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), sd = sd(numero))
?sd
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero))
sd(noticias_mes$numero)
noticias_mes %>% group_by(mes, subFonte) %>% summarise(dp = sd(numero), media = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(dp = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = sd(numero)), media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = sd(numero)), media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = sd(numero)), media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), sd = sd(numero)))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), sd = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), media = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), media = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), media = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), media = median(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), mediana = median(numero))
View(noticias_mes)
noticias_mes <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
View(noticias_mes)
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), mediana = median(numero), dp = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# geral
summary(noticias)
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
# media de noticias por mes
n_noticias_mes_ano <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
noticias_mes
View(noticias_mes)
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
View(noticias_mes)
df <- data.frame(grp = c("A", "B"), fit = 4:5, se = 1:2)
df
k <- ggplot(df, aes(grp, fit, ymin = fit-se, ymax = fit+se)
)
k+ geom_pointrange()
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, xmedia=media+dp))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, xmax=media+dp))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(ano)
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(mes)
View(noticias_mes)
n_noticias_mes_ano <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(mes)
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(~mes)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# geral
summary(noticias)
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
# media de noticias por mes
## melhor solucao eh uma linha da figura para cada portal. cada mes de cada portal eh representado por uma barra e a barra tem uma linha representando o desvio padrao.
n_noticias_mes_ano <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(~mes)
setwd("~/workspace/PhD/src/vies jornais/analise_descritiva_portais/tf-idf")
source("../mongo_utils.R")
source("../utils/utils.R")
library(tidytext)
library(ggplot2)
library(readr)
noticias_words = read_csv("words_subFonte.csv")
freq_by_rank <- noticias_words %>%
group_by(documents) %>%
mutate(rank = row_number(),
`term frequency` = n/total)
ggplot(noticias_words, aes(n/total, fill = documents)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~documents, ncol = 2, scales = "free_y")
freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = documents)) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = documents)) +
geom_line(size = 1.2, alpha = 0.8)
# rank_subset <- freq_by_rank %>%
#   filter(rank < 500,
#          rank > 10)
#
# lm(log10(`term frequency`) ~ log10(rank), data = rank_subset)
#
# freq_by_rank %>%
#   ggplot(aes(rank, `term frequency`, color = documents)) +
#   geom_abline(intercept = -1.1516, slope = -0.9209, color = "gray50", linetype = 2) +
#   geom_line(size = 1.2, alpha = 0.8) +
#   scale_x_log10() +
#   scale_y_log10()
palavras_importantes <- noticias_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word))))
palavras_importantes %>%
top_n(50) %>%
ggplot(aes(word, tf_idf, fill = documents)) +
geom_col() +
labs(x = NULL, y = "tf-idf") +
coord_flip()
palavras_importantes %>%
group_by(documents) %>%
top_n(20) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = documents)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~documents, ncol = 2, scales = "free") +
coord_flip()
rm(noticias_words)
palavras_importantes %>%
top_n(20) %>%
ggplot(aes(word, tf_idf, fill = documents)) +
geom_col() +
labs(x = NULL, y = "tf-idf") +
coord_flip()
palavras_importantes %>%
top_n(20)
alavras_importantes %>%
top_n(20) %>%
ggplot(aes(word, tf_idf, fill = documents))
palavras_importantes %>%
top_n(20) %>%
ggplot(aes(word, tf_idf, fill = documents)) +
geom_col()
