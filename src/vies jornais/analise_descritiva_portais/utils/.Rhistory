con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
estadao_comentarios <- get_data("estadaoComentarios")
View(folha_noticias)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
a <- ggplot(mpg, aes(hwy)) + geom_density(kernel = "gaussian")
a
View(g1_noticias)
g1_noticias %>% select(timestamp) %>% count()
g1_noticias %>% select(timestamp) %>% n()
g1_noticias %>% select(timestamp) %>% summarise(my_cnt1 = n())
g1_noticias %>% select(timestamp) %>% distinct() %>% count()
g1_noticias %>% select(timestamp) %>% unique() %>% count()
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp)))
library(lubridate)
install.packages("lubridate")
library(lubridate)
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp)))
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp)))
a <- ggplot(, aes(hwy)) + geom_density(kernel = "gaussian")
hour()
?hour()
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(created_utc, origin='1970-01-01')))
g1_noticias %>% select(timestamp) %>%
mutate(hour=hour(as.POSIXct(timestamp, origin='1970-01-01')))
?hour
?lubridate
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
a<-filter(noticias, subFonte=="ESTADAO") %>% table(data)
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
ggplot(noticias) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
summary(noticias)
media_mes <- noticias %>% group_by(mes) %>% summarise(media = n()/7) #numero de anos ate agora
View(media_mes)
media_mes <- noticias %>% group_by(mes, subFonte) %>% summarise(media = n()/7) #numero de anos ate agora
View(media_mes)
View(media_mes)
noticias_mes <- noticias %>% group_by(mes, subFonte) %>% summarise(numero = n())
View(noticias_mes)
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean())
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), sd = sd(numero))
?sd
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero))
sd(noticias_mes$numero)
noticias_mes %>% group_by(mes, subFonte) %>% summarise(dp = sd(numero), media = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(dp = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = sd(numero)), media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = sd(numero)), media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = sd(numero)), media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), sd = sd(numero)))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), sd = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), media = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), media = mean(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media2 = mean(numero), media = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), media = median(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), mediana = median(numero))
View(noticias_mes)
noticias_mes <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
View(noticias_mes)
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), mediana = median(numero), dp = sd(numero))
noticias_mes %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# geral
summary(noticias)
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
# media de noticias por mes
n_noticias_mes_ano <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
noticias_mes
View(noticias_mes)
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
View(noticias_mes)
df <- data.frame(grp = c("A", "B"), fit = 4:5, se = 1:2)
df
k <- ggplot(df, aes(grp, fit, ymin = fit-se, ymax = fit+se)
)
k+ geom_pointrange()
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, xmedia=media+dp))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, xmax=media+dp))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(ano)
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(mes)
View(noticias_mes)
n_noticias_mes_ano <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(mes)
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(~mes)
library(dplyr)
library(ggplot2)
library(mongolite)
library(anytime)
library(corrr)
library(lubridate)
get_data <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find()
rm(con)
return(data)
}
g1_noticias <- get_data("g1Noticias")
#g1_comentarios <- get_data("g1Comentarios")
folha_noticias <- get_data("folhaNoticias")
# folha_comentarios <- get_data("folhaComentarios")
estadao_noticias <- get_data("estadaoNoticias")
# estadao_comentarios <- get_data("estadaoComentarios")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data))
# geral
summary(noticias)
## descricao noticias
# numero de noticias por ano
ggplot(noticias) + geom_bar(aes(x=ano))
# numero de noticias por ano x portal
ggplot(noticias) + geom_bar(aes(x=ano, fill=subFonte), position = "dodge")
# numero de noticias por mes x ano por portal
ggplot(noticias) + geom_bar(aes(x=mes, fill=subFonte), position = "dodge") + facet_wrap(~ano)
# numero de noticias por dia x mes x ano por portal
ggplot(noticias) + geom_bar(mapping = aes(x=dia, group=subFonte, color=subFonte), position = "dodge") + facet_grid(ano ~ mes)
ggplot(noticias) + geom_density(mapping = aes(x = data, ..count.., group=subFonte, color = subFonte))
# correlacao das noticias por dia
correlacao_n_noticias_portal <- noticias %>%
select(data, subFonte) %>%
table() %>%
correlate()
# repercussao por dia x mes x ano por portal
repercussao_dia <- noticias %>% mutate(ano = year(data), mes = month(data), dia = day(data), dia_do_ano = yday(data)) %>%
group_by(ano, mes, dia, subFonte) %>%
summarise(n_comentarios = sum(repercussao))
ggplot(repercussao_dia) + geom_jitter(mapping = aes(x=dia, y=n_comentarios, group=subFonte, color=subFonte)) + facet_grid(ano ~ mes)
# media de noticias por mes
## melhor solucao eh uma linha da figura para cada portal. cada mes de cada portal eh representado por uma barra e a barra tem uma linha representando o desvio padrao.
n_noticias_mes_ano <- noticias %>% group_by(ano, mes, subFonte) %>% summarise(numero = n())
noticias_mes <- n_noticias_mes_ano %>% group_by(mes, subFonte) %>% summarise(media = mean(numero), dp = sd(numero), mediana = median(numero))
ggplot(noticias_mes) + geom_pointrange(mapping = aes(subFonte, media, ymin=media-dp, ymax=media+dp)) + facet_wrap(~mes)
source("mongo_utils.R")
library(readr)
library(stringr)
library(tm)
library(wordVectors)
noticias <- get_todas_noticias()
n_palavras <- noticias %>% select(conteudo) %>%
unlist() %>% as.vector() %>%
tolower() %>% str_count(" ")+1
noticias <- cbind(noticias, n_palavras)
noticias_estadao <- noticias %>% filter(subFonte == "ESTADAO")
noticias_folha <- noticias %>% filter(subFonte == "FOLHASP")
noticias_g1 <- noticias %>% filter(subFonte == "G1")
# cria arquivo com todas as noticias
build_corpus <- function(conteudo, infile){
texto <- Corpus(VectorSource(conteudo))
texto <- tm_map(texto, tolower)
texto <- tm_map(texto, removePunctuation, preserve_intra_word_dashes = TRUE)
texto <- tm_map(texto, removeWords, stopwords("pt"))
texto <- tm_map(texto, removeNumbers)
texto <- tm_map(texto, stripWhitespace)
texto <- tm_map(texto, stemDocument)
texto <- tm_map(texto, PlainTextDocument)
tm::writeCorpus(texto, filenames = c(infile, "trash.txt"))
file.remove("trash.txt")
}
build_word_vectors <- function(conteudo, infile, outfile){
build_corpus(conteudo, infile)
if(file.exists(estadao_outfile)){
file.remove(outfile)
}
model = train_word2vec(infile, outfile, vectors=300, threads=4, window=12, iter=5, negative_samples=0)
return(model)
}
estadao_conteudo_ <- noticias_estadao %>% filter(day=1, ano==2014, mes==12) %>%select(conteudo)
setwd("~/workspace/PhD/src/vies jornais/analise_descritiva_portais/utils")
source("mongo_utils.R")
library(readr)
library(stringr)
library(tm)
library(wordVectors)
noticias <- get_todas_noticias()
n_palavras <- noticias %>% select(conteudo) %>%
unlist() %>% as.vector() %>%
tolower() %>% str_count(" ")+1
noticias <- cbind(noticias, n_palavras)
noticias_estadao <- noticias %>% filter(subFonte == "ESTADAO")
noticias_folha <- noticias %>% filter(subFonte == "FOLHASP")
noticias_g1 <- noticias %>% filter(subFonte == "G1")
# cria arquivo com todas as noticias
build_corpus <- function(conteudo, infile){
texto <- Corpus(VectorSource(conteudo))
texto <- tm_map(texto, tolower)
texto <- tm_map(texto, removePunctuation, preserve_intra_word_dashes = TRUE)
texto <- tm_map(texto, removeWords, stopwords("pt"))
texto <- tm_map(texto, removeNumbers)
texto <- tm_map(texto, stripWhitespace)
texto <- tm_map(texto, stemDocument)
texto <- tm_map(texto, PlainTextDocument)
tm::writeCorpus(texto, filenames = c(infile, "trash.txt"))
file.remove("trash.txt")
}
build_word_vectors <- function(conteudo, infile, outfile){
build_corpus(conteudo, infile)
if(file.exists(estadao_outfile)){
file.remove(outfile)
}
model = train_word2vec(infile, outfile, vectors=300, threads=4, window=12, iter=5, negative_samples=0)
return(model)
}
estadao_conteudo_ <- noticias_estadao %>% filter(day=1, ano==2014, mes==12) %>%select(conteudo)
estadao_conteudo_ <- noticias_estadao %>% filter(dia==1, ano==2014, mes==12) %>%select(conteudo)
vectors_estadao <- build_word_vectors(estadao_conteudo, estadao_infile, estadao_outfile)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mes==12) %>%select(conteudo)
vectors_estadao <- build_word_vectors(estadao_conteudo, estadao_infile, estadao_outfile)
estadao_infile <- "a_estadao_words.txt"
estadao_outfile <- "a_estadao_vectors.bin"
vectors_estadao <- build_word_vectors(estadao_conteudo, estadao_infile, estadao_outfile)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014) %>%select(conteudo)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mes==11) %>%select(conteudo)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mês==12) %>%select(conteudo)
View(noticias_estadao)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mes==10) %>%select(conteudo)
View(noticias_estadao)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mes=="Nov") %>%select(conteudo)
estadao_infile <- "a_estadao_words.txt"
estadao_outfile <- "a_estadao_vectors.bin"
vectors_estadao <- build_word_vectors(estadao_conteudo, estadao_infile, estadao_outfile)
# cria arquivo com todas as noticias
build_corpus <- function(conteudo, infile){
texto <- Corpus(VectorSource(conteudo))
texto <- tm_map(texto, tolower)
texto <- tm_map(texto, removePunctuation, preserve_intra_word_dashes = TRUE)
texto <- tm_map(texto, removeWords, stopwords("pt"))
texto <- tm_map(texto, removeNumbers)
texto <- tm_map(texto, stripWhitespace)
texto <- tm_map(texto, stemDocument)
texto <- tm_map(texto, PlainTextDocument)
tm::writeCorpus(texto, filenames = c(infile, "trash.txt"))
file.remove("trash.txt")
}
build_word_vectors <- function(conteudo, infile, outfile){
build_corpus(conteudo, infile)
if(file.exists(outfile)){
file.remove(outfile)
}
model = train_word2vec(infile, outfile, vectors=300, threads=4, window=12, iter=5, negative_samples=0)
return(model)
}
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mes=="Nov") %>%select(conteudo)
estadao_infile <- "a_estadao_words.txt"
estadao_outfile <- "a_estadao_vectors.bin"
vectors_estadao <- build_word_vectors(estadao_conteudo, estadao_infile, estadao_outfile)
estadao_conteudo <- noticias_estadao %>% filter(dia==1, ano==2014, mes=="Nov") %>%select(conteudo)
estadao_infile <- "a_estadao_words.txt"
estadao_outfile <- "v_estadao_vectors.bin"
vectors_estadao <- build_word_vectors(estadao_conteudo, estadao_infile, estadao_outfile)
knitr::opts_chunk$set(echo = F)
source("generate_word_vectors.R")
source("utils.R")
noticias_estadao_processadas <- processa_palavras(noticias_estadao)
processa_palavras <- function(base){
noticias_processadas <- base  %>%
group_by(url) %>%
summarise(conteudo_processado = build_corpus(conteudo))
noticias_tema <- inner_join(base, noticias_processadas, by = "url")
return(noticias_tema)
}
noticias_estadao_processadas <- processa_palavras(noticias_estadao)
noticias_folha_processadas <- processa_palavras(noticias_folha)
View(noticias_folha_processadas)
write_csv(noticias_estadao, "noticias_estadao.csv")
write_csv(noticias_estadao_processadas, "noticias_estadao.csv")
write_csv(noticias_folha_processadas, "noticias_folha.csv")
js <- '[
{
"id": 1,
"val": "a"
},
{
"id": 2,
"val": "b"
},
{
"id": 3,
"val": "c"
}
] '
#library(jsonlite)
library(mongolite)
mongo <- mongo(collection = "test", db = "stocks", url = "mongodb://localhost",
verbose = TRUE)
mongo$insert(fromJSON(js))
library(jsonlite)
a<-fromJSON(js)
View(a)
mongo$insert()
mongo$insert(a)
source("mongo_utils.R")
insert_in_database <- function(colecao){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$insert(colecao)
rm(con)
}
insert_in_database <- function(colecao, nome){
con <- mongo(db = "stocks", collection = nome, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
con$insert(colecao)
rm(con)
}
noticias_estadao <- processa_palavras(noticias_estadao)
knitr::opts_chunk$set(echo = F)
source("generate_word_vectors.R")
source("utils.R")
source("mongo_utils.R")
processa_palavras <- function(base){
noticias_processadas <- base  %>%
group_by(url) %>%
summarise(conteudo_processado = build_corpus(conteudo))
noticias_tema <- inner_join(base, noticias_processadas, by = "url")
return(noticias_tema)
}
noticias_estadao <- processa_palavras(noticias_estadao)
noticias_folha <- processa_palavras(noticias_folha)
insert_in_database(noticias_estadao, "noticias_estadao_processadas")
insert_in_database(noticias_folha, "noticias_folha_processadas")
insert_in_database(noticias_estadao, "noticiasEstadaoProcessadas")
insert_in_database(noticias_estadao, "noticiasEstadaoProcessadas")
insert_in_database(noticias_folha, "noticiasFolhaProcessadas")
