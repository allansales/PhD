library("gmodels")
library("e1071")
library("C50")
install.packages("C50")
install.packages("partykit")
setRepositories()
total <- 10
for(i in 1:total){
print(i)
Sys.sleep(0.1)
}
total <- 20
for(i in 1:total){
Sys.sleep(0.1)
print(i)
# update GUI console
flush.console()
}
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 2)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 1)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 4)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 6)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
install.packages("tcltk2")
library("tcltk2")
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(i in 1:total){
Sys.sleep(0.1)
setTkProgressBar(pb, i, label=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
library("gmodels")
library("e1071")
library("C50")
getMetricas <- function(confusion.matrix){
precision <- confusion.matrix$t[2,2]/sum(confusion.matrix$t[2,])
recall <- confusion.matrix$t[2,2]/sum(confusion.matrix$t[,2])
f.measure <- 2*((precision*recall)/(precision+recall))
acuracia <- sum(diag(confusion.matrix$t))/sum(confusion.matrix$t)
metricas <- c(precision, recall, f.measure, acuracia)
names(metricas) <- c("precision", "recall", "f.measure", "acuracia")
return(metricas)
}
input.target <- function(atributos, ano){
treino <- subset(atributos, atributos$PERIODO<ano)
treinoTarget <- as.factor(as.character(treino$COD_EVASAO))
treinoInput <- treino[,4:ncol(treino)]
teste <- subset(atributos, atributos$PERIODO>=ano)
testeTarget <- as.factor(as.character(teste$COD_EVASAO))
testeInput <- teste[,4:ncol(teste)]
return(list(treinoInput, treinoTarget, testeInput, testeTarget))
}
geraModelo <- function(modelo, treino, treinoTarget, teste, testeTarget, ...){
classificador <- modelo(treino, treinoTarget, ...)
predicao <- predict(classificador, teste)
matriz.confusao <- CrossTable(predicao, testeTarget, prop.r=T, prop.c=T, prop.t=F, prop.chisq=F)
metricas <- getMetricas(matriz.confusao)
return(list(classificador, matriz.confusao, metricas))
}
ano <- 2013
path <- 'curso.atributos/'
arquivos <- list.files(path)
npos <- 3*length(arquivos)
comparacoes <- data.frame(atributos = numeric(npos), algoritimo = numeric(npos), precision = numeric(npos),
recall = numeric(npos), f.measure = numeric(npos), accuracy = numeric(npos))
atributos <- read.csv('todosAlunos.csv', sep=";")
library(reshape)
# cria frame com matricula e periodo
cria.frame <- function(alunos){
atributos <- unique(alunos[,c("MATRICULA", "PERIODO", "COD_EVASAO")])
atributos
}
#adiciona numero de disciplinas no periodo
add.ndisc <- function(alunos, atributos){
aluno.ndisc <- aggregate(CODIGO ~ MATRICULA, alunos, FUN=length)
colnames(aluno.ndisc) <- c("MATRICULA","N.DISC")
atributos <- merge(atributos, aluno.ndisc, by="MATRICULA")
atributos
}
#adiciona numero de disciplinas da situacao x
add.ndisc.situacao <- function(alunos, atributos, situacao, nome.saida){
aluno.n.sit <- aggregate(SITUACAO ~ MATRICULA, alunos, FUN=function(x){a<-table(x)
a[names(a) == situacao]})
colnames(aluno.n.sit) <- c("MATRICULA", nome.saida)
atributos <- merge(atributos, aluno.n.sit, by="MATRICULA")
atributos
}
#adiciona media das disciplinas aprovadas
add.media.aprov <- function(alunos, atributos){
aprovados <- alunos[alunos$SITUACAO=='Aprovado',]
media.aprov <- aggregate(MEDIA ~ MATRICULA + SITUACAO, aprovados, FUN=mean)
media.aprov <- subset(media.aprov, SITUACAO = "Aprovado", select = c("MATRICULA","MEDIA"))
media.aprov$MEDIA <- media.aprov$MEDIA
reprovou.tudo <- data.frame(MATRICULA = unique(alunos$MATRICULA[!(alunos$MATRICULA %in% aprovados$MATRICULA)]))
reprovou.tudo$MEDIA <- 0
medias <- rbind(media.aprov, reprovou.tudo)
colnames(medias) <- c("MATRICULA", "MEDIA.APROV")
atributos <- merge(atributos, medias, by="MATRICULA")
atributos
}
#adiciona numero de disciplinas reprovadas por nota e falta
add.ndisc.repr <- function(alunos, atributos){
nRPF <- add.ndisc.situacao(alunos, atributos, 'Reprovado por Falta', 'N.RPF')
nRPN <- atributos$N.RPN
nRPF <- nRPF$N.RPF
atributos$N.REPR <- nRPN + nRPF
atributos
}
#status do primeiro semestre
add.status.sem.1 <- function(atributos){
atributos$STATUS.1 <- ifelse(atributos$N.APROV == 0, 0, 1) #no progress = 0, progress = 1
atributos
}
#media no primeiro semestre
add.media.semestre <- function(atributos, alunos){
media <- aggregate(MEDIA ~ MATRICULA, alunos, FUN=mean)
media$MEDIA <- media$MEDIA
colnames(media) <- c("MATRICULA", "MEDIA.SEM")
atributos <- merge(atributos, media, by="MATRICULA")
atributos
}
#descobre disciplinas introdutorias
get.disc.intro <- function(alunos){
disc.intro <- names(sort(table(alunos$CODIGO), decreasing = T)[1:5])
disc.intro
}
#adiciona informacoes de disciplinas
add.disc.infor <- function(atributos, alunos){
alunos <- reshape(alunos, timevar = "CODIGO", idvar = c("MATRICULA"), direction = "wide")
atributos <- merge(atributos, alunos, by="MATRICULA")
atributos
}
geraAtributos <- function(alunos){
atributos <- cria.frame(alunos)
atributos <- add.ndisc(alunos, atributos)
atributos <- add.ndisc.situacao(alunos, atributos, 'Aprovado', 'N.APROV')
atributos <- add.media.aprov(alunos, atributos)
atributos <- add.ndisc.situacao(alunos, atributos, 'Reprovado', 'N.RPN')
atributos <- add.ndisc.repr(alunos, atributos)
atributos <- add.status.sem.1(atributos)
atributos <- add.media.semestre(atributos, alunos)
#   disc.intro <- get.disc.intro(alunos)
#   alunos <- alunos[,c("MATRICULA","CODIGO","MEDIA","SITUACAO")]
#   alunos <- alunos[alunos$CODIGO %in% disc.intro,]
#   alunos$CURSOU <- 1
#   atributos <- add.disc.infor(atributos, alunos[,c("MATRICULA","CODIGO","CURSOU")])
#   atributos <- add.disc.infor(atributos, alunos[,c("MATRICULA","CODIGO","MEDIA")])
#   atributos <- add.disc.infor(atributos, alunos[,c("MATRICULA","CODIGO","SITUACAO")])
atributos
}
alunos <- read.csv(file = '../data/alunosUFCG.csv', sep=";", header = T)
cursos <- unique(alunos$CURSO)
for(curso in cursos){
alunos.1 <- alunos[alunos$CURSO==curso & alunos$PERIODO_RELATIVO == 1 & alunos$SITUACAO != 'Trancado',]
nome <- paste(curso,".csv",sep="")
atributos <- try(geraAtributos(alunos.1))
if(class(atributos)!='try-error'){
if(nrow(atributos)>=600){
write.table(atributos, file = paste("curso.atributos/",nome,sep=""), sep=";", row.names = F, quote = F)
}
}
}
# alunos <- read.csv(file = '../data/alunosUFCG.csv', sep=";", header = T)
# alunos.1 <- alunos[alunos$PERIODO_RELATIVO == 1 & alunos$SITUACAO != 'Trancado',]
# atributos <- geraAtributos(alunos.1)
# write.table(atributos, file = "todosAlunos.csv", sep=";", row.names = F, quote = F)
library("RODBC")
channel <- odbcConnect("OpenPRE; CharSet=utf8")
historico = sqlQuery(channel, "select * from preanalytics2015.historico;", stringsAsFactor = FALSE)
View(historico)
unique(historico[,c('media','situacao')]
)
unique(historico['media'==NA,c('situacao')])
historico['media'==NA,c('situacao')]
subset(historico, subset = media==NA, select = situacao)
subset(historico, subset = media==NA, select = 'situacao')
subset(historico, historico$media==NA)
subset(historico, historico$media=='NA', select = 'situacao')
View(historico)
subset(historico, historico$media=='Trancado', select = 'situacao')
str(historico)
View(historico)
subset(historico, select = 'situacao')
str(historico)
write.csv(historico, "historico.csv", quote = F, sep=";", row.names = F, col.names = T)
?write.csv
a<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
?cor.test
cor.test(a,a,method = "spearman")
cor(a,a,method = "spearman")
?information.gain
require("dplyr")
data = data.frame(series_name = c("Sherlock","A"), UserRating = c(1,2))
filter( series_name == "Sherlock") %>% select(UserRating)
filter(data, series_name == "Sherlock") %>% select(UserRating)
require(dplyr)
require(ggplot2)
require(dplyr)
library(dplyr)
library(ggplot2)
library(readr)
install.packages("readr")
library(readr)
?read_csv
setwd("~/workspace/PhD/src/vies_jornais")
gastos_parlamentares <- read_csv('dados/gastos_parlamentares_2016.csv')
View(gastos_parlamentares)
assinaturas_revistas_jornais <- gastos_parlamentares %>% filter(txtDescricao == "ASSINATURA DE PUBLICAÇÕES")
View(assinaturas_revistas_jornais)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% distinct()
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% summarise(n_assinaturas = count(txtFornecedor))
assinaturas_revistas_jornais %>% select(txtFornecedor)
?count
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% mutate(n_assinaturas = count(txtFornecedor))
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% n_assinaturas = count(txtFornecedor)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(a = txtFornecedor)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor, "a") %>%
,
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor, "a")
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor) %>% order_by(n)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor) %>% order_by("n")
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor) %>% arrange(n)
assinaturas_revistas_jornais %>% select(txtFornecedor) %>% count(txtFornecedor) %>% arrange(-n)
assinaturas_revistas_jornais %>% count(txtFornecedor) %>% arrange(-n)
assinaturas_revistas_jornais %>% count(txtFornecedor) %>% arrange(n_assinaturas = -n)
assinaturas_revistas_jornais %>% count(txtFornecedor) %>% arrange(-n)
n_assinaturas_editora = assinaturas_revistas_jornais %>% count(txtFornecedor) %>% arrange(-n)
View(n_assinaturas_editora)
library(dplyr)
library(ggplot2)
library(readr)
library(tm)
gastos_parlamentares <- read_csv('dados/gastos_parlamentares_2016.csv')
assinaturas_revistas_jornais <- gastos_parlamentares %>%
filter(txtDescricao == "ASSINATURA DE PUBLICACOES") %>%
iconv(from="UTF-8", to="ASCII//TRANSLIT")
View(gastos_parlamentares)
assinaturas_revistas_jornais <- assinaturas_revistas_jornais %>% iconv(from="UTF-8", to="ASCII//TRANSLIT")
assinaturas_revistas_jornais
library(dplyr)
library(ggplot2)
library(readr)
library(tm)
gastos_parlamentares <- read_csv('dados/gastos_parlamentares_2016.csv')
assinaturas_revistas_jornais <- gastos_parlamentares %>%
filter(txtDescricao == "ASSINATURA DE PUBLICACOES")
View(assinaturas_revistas_jornais)
assinaturas_revistas_jornais <- gastos_parlamentares %>%
filter(txtDescricao == "ASSINATURA DE PUBLICAÇÕES")
View(assinaturas_revistas_jornais)
fornecedor <- assinaturas_revistas_jornais %>% select(txtFornecedor) %>% iconv(from="UTF-8", to="ASCII//TRANSLIT")
fornecedor
fornecedor <- assinaturas_revistas_jornais %>% select(txtFornecedor) %>% iconv(from="UTF-8", to="ASCII//TRANSLIT") %>% VectorSource() %>% Corpus()
fornecedor <- tm_map(fornecedor, tolower)
fornecedor <- tm_map(fornecedor, removePunctuation, preserve_intra_word_dashes = FALSE)
assinaturas_revistas_jornais <- assinaturas_revistas_jornais %>% mutate(editora = fornecedor[[1]])
View(assinaturas_revistas_jornais)
fornecedor <- assinaturas_revistas_jornais %>% select(txtFornecedor) %>% VectorSource() %>% Corpus()
fornecedor <- tm_map(fornecedor, tolower)
fornecedor <- tm_map(fornecedor, removePunctuation, preserve_intra_word_dashes = FALSE)
assinaturas_revistas_jornais <- assinaturas_revistas_jornais %>% mutate(editora = fornecedor[[1]])
View(assinaturas_revistas_jornais)
fornecedor <- tm_map(chat, removeWords, "sa")
tm_map(fornecedor, removeWords, "sa")
fornecedor_1 <- tm_map(fornecedor, removeWords, "sa")
fornecedor_1
fornecedor_1[[1]]
fornecedor <- tm_map(fornecedor, removeWords, "sa")
assinaturas_revistas_jornais <- assinaturas_revistas_jornais %>% mutate(editora = fornecedor[[1]])
n_assinaturas_editora = assinaturas_revistas_jornais %>%
count(txtFornecedor) %>%
arrange(-n)
n_assinaturas_editora_partido = assinaturas_revistas_jornais %>%
group_by(sgPartido) %>%
count(editora)
percent_assinaturas_editora_partido = n_assinaturas_editora_partido %>%
group_by(sgPartido) %>%
mutate(porcentagen = n/sum(n))
View(percent_assinaturas_editora_partido)
View(n_assinaturas_editora)
n_assinaturas_editora = assinaturas_revistas_jornais %>%
count(fornecedor) %>%
arrange(-n)
assinaturas_revistas_jornais <- assinaturas_revistas_jornais %>% mutate(editora = fornecedor[[1]])
n_assinaturas_editora = assinaturas_revistas_jornais %>%
count(fornecedor) %>%
arrange(-n)
View(assinaturas_revistas_jornais)
gastos_parlamentares <- read_csv('dados/gastos_parlamentares_2016.csv')
assinaturas_revistas_jornais <- gastos_parlamentares %>%
filter(txtDescricao == "ASSINATURA DE PUBLICAÇÕES")
# padronizando as editoras
fornecedor <- assinaturas_revistas_jornais %>% select(txtFornecedor) %>% VectorSource() %>% Corpus()
fornecedor <- tm_map(fornecedor, tolower)
fornecedor <- tm_map(fornecedor, removePunctuation, preserve_intra_word_dashes = FALSE)
fornecedor <- tm_map(fornecedor, removeWords, "sa")
assinaturas_revistas_jornais <- assinaturas_revistas_jornais %>% mutate(editora = fornecedor[[1]])
# descricao dos dados
n_assinaturas_editora = assinaturas_revistas_jornais %>%
count(editora) %>%
arrange(-n)
n_assinaturas_editora_partido = assinaturas_revistas_jornais %>%
group_by(sgPartido) %>%
count(editora)
percent_assinaturas_editora_partido = n_assinaturas_editora_partido %>%
group_by(sgPartido) %>%
mutate(porcentagen = n/sum(n))
View(assinaturas_revistas_jornais)
View(percent_assinaturas_editora_partido)
View(n_assinaturas_editora)
View(percent_assinaturas_editora_partido)
percent_assinaturas_editora_partido = n_assinaturas_editora_partido %>%
group_by(sgPartido) %>%
mutate(total_assinaturas = sum(n), porcentagen = n/sum(n))
View(percent_assinaturas_editora_partido)
View(n_assinaturas_editora)
View(percent_assinaturas_editora_partido)
